{"ast":null,"code":"var _jsxFileName = \"/home/phil/react-music-player/src/components/LibrarySong.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = _ref => {\n  let {\n    song,\n    songs,\n    setCurrentSong,\n    id,\n    audioRef,\n    isPlaying\n  } = _ref;\n\n  const songSelectHandler = () => {\n    setCurrentSong(song); // Add active state\n\n    const newSongs = songs.map(song => {\n      if (song.id === id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    }); //check if the song is playing\n\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n\n      if (playPromise !== undefined) {\n        playPromise.then(audio => {\n          audioRef.current.play();\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelectHandler,\n    className: `library-song ${song.active ? 'selected' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: song.cover,\n      alt: song.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/home/phil/react-music-player/src/components/LibrarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","id","audioRef","isPlaying","songSelectHandler","newSongs","map","active","playPromise","current","play","undefined","then","audio","cover","name","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAG,QAA8D;AAAA,MAA7D;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,cAAf;AAA+BC,IAAAA,EAA/B;AAAmCC,IAAAA,QAAnC;AAA6CC,IAAAA;AAA7C,GAA6D;;AAChF,QAAMC,iBAAiB,GAAG,MAAM;AAC9BJ,IAAAA,cAAc,CAACF,IAAD,CAAd,CAD8B,CAE9B;;AACA,UAAMO,QAAQ,GAAGN,KAAK,CAACO,GAAN,CAAWR,IAAD,IAAS;AAClC,UAAGA,IAAI,CAACG,EAAL,KAAYA,EAAf,EAAkB;AAChB,eAAM,EACJ,GAAGH,IADC;AAEJS,UAAAA,MAAM,EAAE;AAFJ,SAAN;AAID,OALD,MAKO;AACL,eAAO,EACL,GAAGT,IADE;AAELS,UAAAA,MAAM,EAAG;AAFJ,SAAP;AAID;AACF,KAZgB,CAAjB,CAH8B,CAgB9B;;AACA,QAAGJ,SAAH,EAAc;AACZ,YAAMK,WAAW,GAAGN,QAAQ,CAACO,OAAT,CAAiBC,IAAjB,EAApB;;AACA,UAAGF,WAAW,KAAKG,SAAnB,EAA8B;AAC5BH,QAAAA,WAAW,CAACI,IAAZ,CAAkBC,KAAD,IAAU;AACzBX,UAAAA,QAAQ,CAACO,OAAT,CAAiBC,IAAjB;AACD,SAFD;AAGD;AACF;AACF,GAzBD;;AA0BA,sBACE;AAAK,IAAA,OAAO,EAAEN,iBAAd;AAAiC,IAAA,SAAS,EAAG,gBAAeN,IAAI,CAACS,MAAL,GAAc,UAAd,GAA2B,EAAG,EAA1F;AAAA,4BACE;AAAK,MAAA,GAAG,EAAET,IAAI,CAACgB,KAAf;AAAsB,MAAA,GAAG,EAAEhB,IAAI,CAACiB;AAAhC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA,kBAAKjB,IAAI,CAACiB;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKjB,IAAI,CAACkB;AAAV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CApCD;;KAAMnB,W;AAsCN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\n\nconst LibrarySong = ({ song, songs, setCurrentSong, id, audioRef, isPlaying }) => {\n  const songSelectHandler = () => {\n    setCurrentSong(song); \n    // Add active state\n    const newSongs = songs.map((song)=> {\n      if(song.id === id){\n        return{\n          ...song,\n          active: true,\n        }\n      } else {\n        return {\n          ...song,\n          active : false, \n        }\n      }\n    })\n    //check if the song is playing\n    if(isPlaying) {\n      const playPromise = audioRef.current.play()\n      if(playPromise !== undefined) {\n        playPromise.then((audio) =>{\n          audioRef.current.play()\n        })\n      }\n    }\n  };\n  return (\n    <div onClick={songSelectHandler} className={`library-song ${song.active ? 'selected' : ''}`}>\n      <img src={song.cover} alt={song.name}></img>\n      <div className=\"song-description\">\n        <h3>{song.name}</h3>\n        <h4>{song.artist}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n"]},"metadata":{},"sourceType":"module"}