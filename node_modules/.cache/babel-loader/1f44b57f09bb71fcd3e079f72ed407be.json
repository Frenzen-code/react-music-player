{"ast":null,"code":"var _jsxFileName = \"/home/phil/react-music-player/src/components/LibrarySong.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = _ref => {\n  let {\n    song,\n    songs,\n    setCurrentSong,\n    id,\n    audioRef,\n    isPlaying\n  } = _ref;\n\n  const songSelectHandler = () => {\n    setCurrentSong(song); //check if the song is playing\n\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelectHandler,\n    className: \"library-song\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: song.cover,\n      alt: song.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/home/phil/react-music-player/src/components/LibrarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","id","audioRef","isPlaying","songSelectHandler","playPromise","current","play","cover","name","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAG,QAA8D;AAAA,MAA7D;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,cAAf;AAA+BC,IAAAA,EAA/B;AAAmCC,IAAAA,QAAnC;AAA6CC,IAAAA;AAA7C,GAA6D;;AAChF,QAAMC,iBAAiB,GAAG,MAAM;AAC9BJ,IAAAA,cAAc,CAACF,IAAD,CAAd,CAD8B,CAE9B;;AACA,QAAGK,SAAH,EAAc;AACZ,YAAME,WAAW,GAAGH,QAAQ,CAACI,OAAT,CAAiBC,IAAjB,EAApB;AACD;AACF,GAND;;AAOA,sBACE;AAAK,IAAA,OAAO,EAAEH,iBAAd;AAAiC,IAAA,SAAS,EAAC,cAA3C;AAAA,4BACE;AAAK,MAAA,GAAG,EAAEN,IAAI,CAACU,KAAf;AAAsB,MAAA,GAAG,EAAEV,IAAI,CAACW;AAAhC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA,kBAAKX,IAAI,CAACW;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKX,IAAI,CAACY;AAAV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAjBD;;KAAMb,W;AAmBN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\n\nconst LibrarySong = ({ song, songs, setCurrentSong, id, audioRef, isPlaying }) => {\n  const songSelectHandler = () => {\n    setCurrentSong(song);\n    //check if the song is playing\n    if(isPlaying) {\n      const playPromise = audioRef.current.play()\n    }\n  };\n  return (\n    <div onClick={songSelectHandler} className=\"library-song\">\n      <img src={song.cover} alt={song.name}></img>\n      <div className=\"song-description\">\n        <h3>{song.name}</h3>\n        <h4>{song.artist}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n"]},"metadata":{},"sourceType":"module"}