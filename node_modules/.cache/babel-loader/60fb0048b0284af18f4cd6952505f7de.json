{"ast":null,"code":"var _jsxFileName = \"/home/phil/react-music-player/src/components/LibrarySong.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = _ref => {\n  let {\n    song,\n    songs,\n    setCurrentSong,\n    id,\n    audioRef,\n    isPlaying,\n    setSongs\n  } = _ref;\n\n  const songSelectHandler = () => {\n    setCurrentSong(song); // Add active state\n\n    const newSongs = songs.map(song => {\n      if (song.id === id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs); //check if the song is playing\n\n    if (isPlaying) audioRef.current.play();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelectHandler,\n    className: `library-song ${song.active ? \"selected\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: song.cover,\n      alt: song.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/home/phil/react-music-player/src/components/LibrarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","id","audioRef","isPlaying","setSongs","songSelectHandler","newSongs","map","active","current","play","cover","name","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAGA,MAAMC,WAAW,GAAG,QAQd;AAAA,MARe;AACnBC,IAAAA,IADmB;AAEnBC,IAAAA,KAFmB;AAGnBC,IAAAA,cAHmB;AAInBC,IAAAA,EAJmB;AAKnBC,IAAAA,QALmB;AAMnBC,IAAAA,SANmB;AAOnBC,IAAAA;AAPmB,GAQf;;AACJ,QAAMC,iBAAiB,GAAG,MAAM;AAC9BL,IAAAA,cAAc,CAACF,IAAD,CAAd,CAD8B,CAE9B;;AACA,UAAMQ,QAAQ,GAAGP,KAAK,CAACQ,GAAN,CAAWT,IAAD,IAAU;AACnC,UAAIA,IAAI,CAACG,EAAL,KAAYA,EAAhB,EAAoB;AAClB,eAAO,EACL,GAAGH,IADE;AAELU,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID,OALD,MAKO;AACL,eAAO,EACL,GAAGV,IADE;AAELU,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID;AACF,KAZgB,CAAjB;AAaAJ,IAAAA,QAAQ,CAACE,QAAD,CAAR,CAhB8B,CAiB9B;;AACA,QAAGH,SAAH,EAAcD,QAAQ,CAACO,OAAT,CAAiBC,IAAjB;AACf,GAnBD;;AAoBA,sBACE;AACE,IAAA,OAAO,EAAEL,iBADX;AAEE,IAAA,SAAS,EAAG,gBAAeP,IAAI,CAACU,MAAL,GAAc,UAAd,GAA2B,EAAG,EAF3D;AAAA,4BAIE;AAAK,MAAA,GAAG,EAAEV,IAAI,CAACa,KAAf;AAAsB,MAAA,GAAG,EAAEb,IAAI,CAACc;AAAhC;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA,kBAAKd,IAAI,CAACc;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKd,IAAI,CAACe;AAAV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAzCD;;KAAMhB,W;AA2CN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\n\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying,\n  setSongs,\n}) => {\n  const songSelectHandler = () => {\n    setCurrentSong(song);\n    // Add active state\n    const newSongs = songs.map((song) => {\n      if (song.id === id) {\n        return {\n          ...song,\n          active: true,\n        };\n      } else {\n        return {\n          ...song,\n          active: false,\n        };\n      }\n    });\n    setSongs(newSongs);\n    //check if the song is playing\n    if(isPlaying) audioRef.current.play();\n  };\n  return (\n    <div\n      onClick={songSelectHandler}\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\n    >\n      <img src={song.cover} alt={song.name}></img>\n      <div className=\"song-description\">\n        <h3>{song.name}</h3>\n        <h4>{song.artist}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n"]},"metadata":{},"sourceType":"module"}