{"ast":null,"code":"var _jsxFileName = \"/home/phil/react-music-player/src/components/Player.js\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = _ref => {\n  let {\n    songInfo,\n    setSongInfo,\n    currentSong,\n    isPlaying,\n    setIsPlaying,\n    audioRef,\n    songs,\n    setCurrentSong,\n    setSongs\n  } = _ref;\n\n  const activeLibraryHandler = nextPrev => {\n    const newSongs = songs.map(song => {\n      if (song.id === currentSong.id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs);\n  }; // Event Handlers\n\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  };\n\n  const dragHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo,\n      currentTime: e.target.value\n    });\n  };\n\n  const skipTrackHandler = async direction => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n\n    if (direction === \"skip-forward\") {\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\n    }\n\n    if (direction === \"skip-back\") {\n      if ((currentIndex - 1) % songs.lenght === -1) {\n        await setCurrentSong(songs[songs.lenght - 1]);\n        if (isPlaying) audioRef.current.play();\n        return;\n      }\n\n      await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n    }\n\n    if (isPlaying) audioRef.current.play();\n  }; // Add the styles\n\n\n  const trackAnim = {\n    transform: `translateX(${songInfo.animationPercentage}%)`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: `linear-gradient(to right,${currentSong.color[0]},${currentSong.color[1]})`\n        },\n        className: \"track\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          min: 0,\n          max: songInfo.duration || 0,\n          value: songInfo.currentTime,\n          onChange: dragHandler,\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: trackAnim,\n          className: \"animate-track\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: songInfo.duration ? getTime(songInfo.duration) : \"0:00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrackHandler(\"skip-back\"),\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playSongHandler,\n        className: \"play\",\n        size: \"2x\",\n        icon: isPlaying ? faPause : faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight,\n        onClick: () => skipTrackHandler(\"skip-forward\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/home/phil/react-music-player/src/components/Player.js"],"names":["React","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","Player","songInfo","setSongInfo","currentSong","isPlaying","setIsPlaying","audioRef","songs","setCurrentSong","setSongs","activeLibraryHandler","nextPrev","newSongs","map","song","id","active","playSongHandler","current","pause","play","getTime","time","Math","floor","slice","dragHandler","e","currentTime","target","value","skipTrackHandler","direction","currentIndex","findIndex","length","lenght","trackAnim","transform","animationPercentage","background","color","duration"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faAngleLeft,\n  faAngleRight,\n  faPause,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Player = ({\n  songInfo,\n  setSongInfo,\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  audioRef,\n  songs,\n  setCurrentSong,\n  setSongs,\n}) => {\n\n  const activeLibraryHandler = (nextPrev) => {\n    const newSongs = songs.map((song) => {\n      if (song.id === currentSong.id) {\n        return {\n          ...song,\n          active: true,\n        };\n      } else {\n        return {\n          ...song,\n          active: false,\n        };\n      }\n    });\n    setSongs(newSongs);\n  }\n  // Event Handlers\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const getTime = (time) => {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  };\n  const dragHandler = (e) => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo, currentTime: e.target.value });\n  };\n\n  const skipTrackHandler = async (direction) => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n\n    if (direction === \"skip-forward\") {\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex + 1) % songs.length])\n    }\n    if (direction === \"skip-back\") {\n      if ((currentIndex - 1) % songs.lenght === -1) {\n        await setCurrentSong(songs[songs.lenght - 1]);\n        if (isPlaying) audioRef.current.play();\n        return;\n      } \n      await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n    }\n    if (isPlaying) audioRef.current.play();\n  };\n  // Add the styles\n  const trackAnim = {\n    transform: `translateX(${songInfo.animationPercentage}%)`,\n  };\n\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <div\n          style={{\n            background: `linear-gradient(to right,${currentSong.color[0]},${currentSong.color[1]})`,\n          }}\n          className=\"track\"\n        >\n          <input\n            min={0}\n            max={songInfo.duration || 0}\n            value={songInfo.currentTime}\n            onChange={dragHandler}\n            type=\"range\"\n          />\n          <div style={trackAnim} className=\"animate-track\"></div>\n        </div>\n        <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          onClick={() => skipTrackHandler(\"skip-back\")}\n          className=\"skip-back\"\n          size=\"2x\"\n          icon={faAngleLeft}\n        />\n        <FontAwesomeIcon\n          onClick={playSongHandler}\n          className=\"play\"\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon\n          className=\"skip-forward\"\n          size=\"2x\"\n          icon={faAngleRight}\n          onClick={() => skipTrackHandler(\"skip-forward\")}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}